apply plugin: 'java'
apply plugin: 'war'
apply from: 'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'

// In this section you declare where to find the dependencies of your project
repositories {
<<<<<<< HEAD
=======
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
>>>>>>> Added changes to files and am very confused.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
<<<<<<< HEAD
    compile 'org.slf4j:slf4j-api:1.7.24'
=======
    compile 'org.slf4j:slf4j-api:1.7.25'
    // Servlet
>>>>>>> Added changes to files and am very confused.
    compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
    // JSTL
    compile group: 'javax.servlet.jsp', name: 'javax.servlet.jsp-api', version: '2.3.1'
    // MySQL JDBC
<<<<<<< HEAD
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.43'

    // Following is for building RESTful services
    // JAX-RS -- Jersey
    // compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0.1'
    // JAX-RS -- Jersey Servlet
    compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet', version: '2.25'
    // JAX-RS -- Jersey Jackson
    // compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: '2.25.1'

    // JUnit for running simple tests
    testCompile 'junit:junit:4.12'
=======
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.45'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    // mockito for mocking utilities methods
    testCompile "org.mockito:mockito-core:2.+"
>>>>>>> Added changes to files and am very confused.
}

gretty {
    httpPort = 8080
    contextPath = '/'
}
<<<<<<< HEAD

// Javac related task to generate classpath for linter
task generateClasspath {
	description 'Generate classpath file for Javac linter'
	ext.destFile = file("$buildDir/classpath.txt")
	outputs.file destFile
	doLast {
		def classpathString = sourceSets.main.runtimeClasspath.collect{ it.absolutePath }.join(File.pathSeparator)
		if (!destFile.parentFile.exists()) {
			destFile.parentFile.mkdirs()
		}
		assert destFile.parentFile.exists()
		destFile.text = 'export CLASSPATH="' + classpathString + '"'
	}
}
=======
>>>>>>> Added changes to files and am very confused.
